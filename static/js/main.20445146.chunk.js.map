{"version":3,"sources":["types.ts","components/Todo/Todo.tsx","components/TodoListFooter/filterButtons.ts","components/TodoListFooter/FilterButton.tsx","components/TodoList/utils.ts","components/TodoListFooter/TodoListFooter.tsx","api.ts","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["Filters","Todo","title","completed","id","toggleTodo","removeTodo","changeTodoTitle","useState","editing","setEditing","newTitle","setNewTitle","handleSaveTitle","replaceAll","className","classnames","view","type","onChange","checked","htmlFor","onDoubleClick","onClick","value","e","target","onBlur","onKeyUp","key","filterButtons","active","FilterButton","appliedFilter","setFilter","classNames","selected","calculateIncompleteTodos","todos","filter","todo","length","TodoListFooter","clearCompletedTodos","navigate","useNavigate","search","useLocation","searchParams","URLSearchParams","get","filterName","delete","set","toString","map","button","USER_ID","BASE_URL","getUserInfo","URL","fetch","then","res","json","getTodos","addTodoToServer","method","headers","body","JSON","stringify","userId","removeTodoFromServer","todoId","updateTodoOnServer","newValue","TodoList","setTodos","todoTitle","setTodoTitle","loadingUser","setLoadingUser","userName","setUser","errorMessage","setErrorMessage","filterValue","convertFilterToEnum","loadUser","a","userFromServer","error","name","loadTodos","dataFromServer","useEffect","onlyOnServer","currentCompletedValue","find","result","undefined","addTodo","event","preventDefault","reponseOnAddTodoToServer","trim","visibleTodos","getVisibleTodos","onSubmit","placeholder","allComplete","listOfTodosToToggle","forEach","toggleAll","todosToRemoveFromServer","getIncompleteTodoIds","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20445146.chunk.js","sourcesContent":["export enum Filters {\n  active = 'active',\n  completed = 'completed',\n}\n","import classnames from 'classnames';\nimport React, { useState } from 'react';\n\ntype TodoAction = (todiId: number) => void;\n\ninterface Props extends Todo {\n  toggleTodo: TodoAction,\n  removeTodo: TodoAction,\n  changeTodoTitle: (newTitle: string, todoId: number) => void,\n}\n\nexport const Todo: React.FC<Props> = ({\n  title,\n  completed,\n  id,\n  toggleTodo,\n  removeTodo,\n  changeTodoTitle,\n}) => {\n  const [editing, setEditing] = useState(false);\n  const [newTitle, setNewTitle] = useState(title);\n\n  const handleSaveTitle = () => {\n    const formattedTitle = newTitle.replaceAll(' ', '');\n\n    if (formattedTitle === '') {\n      setNewTitle(title);\n    } else {\n      changeTodoTitle(newTitle, id);\n    }\n\n    setEditing(false);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    switch (e.key) {\n      case 'Enter':\n        handleSaveTitle();\n        break;\n      case 'Escape':\n        setNewTitle(title);\n        setEditing(false);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <li\n      className={classnames(\n        { completed },\n        { editing },\n      )}\n    >\n      <div className={classnames(\n        { view: !completed },\n        { completed },\n      )}\n      >\n        <input\n          type=\"checkbox\"\n          id={`todo-${id}`}\n          className=\"toggle\"\n          onChange={() => {\n            toggleTodo(id);\n          }}\n          checked={completed}\n        />\n        <label\n          htmlFor=\"none\"\n          onDoubleClick={() => {\n            if (completed) {\n              return;\n            }\n\n            setEditing(true);\n          }}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={() => {\n            removeTodo(id);\n          }}\n        >\n          {' '}\n        </button>\n      </div>\n      <input\n        type=\"text\"\n        className=\"edit\"\n        value={newTitle}\n        onChange={(e) => {\n          setNewTitle(e.target.value);\n        }}\n        onBlur={() => {\n          handleSaveTitle();\n        }}\n        onKeyUp={handleKeyPress}\n      />\n    </li>\n  );\n};\n","import { Filters } from '../../types';\n\nconst filterButtons = [\n  {\n    title: 'All',\n    value: null,\n  },\n  {\n    title: 'Active',\n    value: Filters.active,\n  },\n  {\n    title: 'Completed',\n    value: Filters.completed,\n  },\n];\n\nexport default filterButtons;\n","import classNames from 'classnames';\n\ntype FilterValue = string | null;\n\ninterface Props {\n  title: string;\n  appliedFilter: FilterValue;\n  value: FilterValue;\n  setFilter: (filterValue: FilterValue) => void;\n}\n\nexport const FilterButton: React.FC<Props> = ({\n  title,\n  appliedFilter,\n  value,\n  setFilter,\n}) => {\n  return (\n    <button\n      type=\"button\"\n      className={classNames({ selected: value === appliedFilter })}\n      onClick={() => {\n        setFilter(value);\n      }}\n    >\n      {title}\n    </button>\n  );\n};\n","import { useState } from 'react';\nimport { Filters } from '../../types';\n\nexport const calculateIncompleteTodos = (todos: Todo[]) => {\n  return todos.filter(todo => !todo.completed).length;\n};\n\nexport const getIncompleteTodoIds = (todos: Todo[]) => {\n  return todos.filter(todo => todo.completed).map(todo => todo.id);\n};\n\nexport const getVisibleTodos = (todos: Todo[], appliedFilter: Filters | null) => {\n  return todos.filter(todo => {\n    switch (appliedFilter) {\n      case Filters.active:\n        return !todo.completed;\n      case Filters.completed:\n        return todo.completed;\n      default:\n        return true;\n    }\n  });\n};\n\nexport const convertFilterToEnum = (filterValue: string | null) => {\n  switch (filterValue) {\n    case 'active':\n      return Filters.active;\n    case 'completed':\n      return Filters.completed;\n    default:\n      return null;\n  }\n};\n\nexport const useLocalStorage = <T>(key: string, initialValue: T):\n[value: T, save: (value: T) => void] => {\n  const valueFromStorage = localStorage.getItem(key);\n  const [value, setValue] = useState<T>(\n    valueFromStorage ? JSON.parse(valueFromStorage) : initialValue,\n  );\n\n  const save = (newValue: T) => {\n    setValue(newValue);\n    localStorage.setItem(key, JSON.stringify(newValue));\n  };\n\n  return [value, save];\n};\n","import { useLocation, useNavigate } from 'react-router-dom';\nimport filterButtons from './filterButtons';\nimport { FilterButton } from './FilterButton';\nimport { calculateIncompleteTodos } from '../TodoList/utils';\n\ninterface Props {\n  todos: Todo[],\n  clearCompletedTodos: () => void,\n}\n\nexport const TodoListFooter:React.FC<Props> = ({\n  todos,\n  clearCompletedTodos,\n}) => {\n  const navigate = useNavigate();\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n  const appliedFilter = searchParams.get('filter');\n\n  const setFilter = (filterName: string | null) => {\n    if (filterName === null) {\n      searchParams.delete('filter');\n    } else {\n      searchParams.set('filter', filterName);\n    }\n\n    navigate({\n      search: searchParams.toString(),\n    });\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {calculateIncompleteTodos(todos)}\n        {' '}\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        {filterButtons.map(button => (\n          <li key={button.value}>\n            <FilterButton\n              {...button}\n              appliedFilter={appliedFilter}\n              setFilter={setFilter}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={() => {\n          clearCompletedTodos();\n        }}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","const USER_ID = 2474;\nconst BASE_URL = 'https://mate.academy/students-api';\n\nexport const getUserInfo = () => {\n  const URL = `${BASE_URL}/users/${USER_ID}`;\n\n  return fetch(URL)\n    .then(res => res.json());\n};\n\nexport const getTodos = () => {\n  const URL = `${BASE_URL}/todos?userId=${USER_ID}`;\n\n  return fetch(URL)\n    .then(res => res.json());\n};\n\nexport const addTodoToServer = (title: string) => {\n  const URL = `${BASE_URL}/todos`;\n\n  return fetch(URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      title,\n      userId: USER_ID,\n      completed: false,\n    }),\n  })\n    .then(res => res.json());\n};\n\nexport const removeTodoFromServer = (todoId: number) => {\n  const URL = `${BASE_URL}/todos/${todoId}`;\n\n  return fetch(URL, {\n    method: 'DELETE',\n  })\n    .then(res => res.json());\n};\n\nexport const updateTodoOnServer = (\n  todoId: number,\n  newValue: { [key: string]: string | boolean },\n) => {\n  const URL = `${BASE_URL}/todos/${todoId}`;\n\n  return fetch(URL, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(newValue),\n  })\n    .then(res => res.json());\n};\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Todo } from '../Todo';\nimport { TodoListFooter } from '../TodoListFooter';\nimport {\n  getUserInfo,\n  getTodos,\n  addTodoToServer,\n  removeTodoFromServer,\n  updateTodoOnServer,\n} from '../../api';\nimport {\n  calculateIncompleteTodos,\n  getVisibleTodos,\n  convertFilterToEnum,\n  getIncompleteTodoIds,\n} from './utils';\n\nexport const TodoList = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoTitle, setTodoTitle] = useState('');\n  const [loadingUser, setLoadingUser] = useState(true);\n  const [userName, setUser] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n  const appliedFilter = convertFilterToEnum(searchParams.get('filter'));\n\n  const loadUser = async () => {\n    const userFromServer = await getUserInfo();\n\n    if (!userFromServer.error) {\n      setUser(userFromServer.name);\n      setLoadingUser(false);\n    } else {\n      setErrorMessage('Failed to fecth User Info');\n    }\n  };\n\n  const loadTodos = async () => {\n    const dataFromServer = await getTodos();\n\n    if (!dataFromServer.error) {\n      setTodos(dataFromServer);\n    } else {\n      setErrorMessage('Failed to fetch todos');\n    }\n  };\n\n  useEffect(() => {\n    loadUser();\n    loadTodos();\n  }, []);\n\n  const toggleTodo = async (todoId: number, onlyOnServer = false) => {\n    const currentCompletedValue = todos.find(todo => todo.id === todoId)?.completed;\n\n    if (!onlyOnServer) {\n      const result = todos.map(todo => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      });\n\n      setTodos(result);\n    }\n\n    if (currentCompletedValue !== undefined) {\n      const responseOnUpdateTodoOnServer = await updateTodoOnServer(todoId, {\n        completed: !currentCompletedValue,\n      });\n\n      if (responseOnUpdateTodoOnServer.error) {\n        setErrorMessage('Failed to update todo on server');\n      }\n    }\n  };\n\n  const toggleAll = () => {\n    const allComplete = calculateIncompleteTodos(todos) === 0;\n    const listOfTodosToToggle = todos.filter(todo => (\n      allComplete || todo.completed === false\n    )).map(todo => todo.id);\n\n    const result = todos.map(todo => ({\n      ...todo,\n      completed: !allComplete,\n    }));\n\n    setTodos(result);\n\n    listOfTodosToToggle.forEach(todoId => {\n      toggleTodo(todoId, true);\n    });\n  };\n\n  const removeTodo = async (todoId: number) => {\n    const result = todos.filter(todo => todo.id !== todoId);\n\n    setTodos(result);\n\n    const responseOnRemoveTodo = await removeTodoFromServer(todoId);\n\n    if (responseOnRemoveTodo.error) {\n      setErrorMessage('Failed to remove todo from server');\n    }\n  };\n\n  const addTodo = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const formattedTitle = todoTitle.replaceAll(' ', '');\n\n    if (formattedTitle === '') {\n      return;\n    }\n\n    const reponseOnAddTodoToServer = await addTodoToServer(todoTitle);\n\n    if (reponseOnAddTodoToServer.error) {\n      setErrorMessage('Failed to add todo to server');\n\n      return;\n    }\n\n    setTodos([\n      ...todos,\n      {\n        title: todoTitle.trim(),\n        completed: false,\n        id: reponseOnAddTodoToServer.id,\n      },\n    ]);\n    setTodoTitle('');\n  };\n\n  const clearCompletedTodos = () => {\n    const result = todos.filter(todo => !todo.completed);\n    const todosToRemoveFromServer = getIncompleteTodoIds(todos);\n\n    setTodos(result);\n\n    todosToRemoveFromServer.forEach(async (id) => {\n      const responseOnRemoveTodo = await removeTodoFromServer(id);\n\n      if (responseOnRemoveTodo.error) {\n        setErrorMessage('Failed to remove todo from server');\n      }\n    });\n  };\n\n  const changeTodoTitle = async (newTitle: string, todoId: number) => {\n    const result = todos.map(todo => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          title: newTitle.trim(),\n        };\n      }\n\n      return {\n        ...todo,\n      };\n    });\n\n    setTodos(result);\n\n    const responseOnUpdateTodoOnServer = await updateTodoOnServer(todoId, {\n      title: newTitle,\n    });\n\n    if (responseOnUpdateTodoOnServer.error) {\n      setErrorMessage('Failed to update todo on server');\n    }\n  };\n\n  const visibleTodos = getVisibleTodos(todos, appliedFilter);\n\n  return (\n    <div>\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>{loadingUser ? 'Loading...' : userName}</h1>\n\n          <form onSubmit={addTodo}>\n            <input\n              type=\"text\"\n              className=\"new-todo\"\n              placeholder=\"What needs to be done?\"\n              value={todoTitle}\n              onChange={(e) => {\n                setTodoTitle(e.target.value);\n              }}\n            />\n          </form>\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={() => {\n              toggleAll();\n            }}\n            checked={calculateIncompleteTodos(todos) === 0}\n          />\n          {/* eslint-disable-next-line */}\n          <label htmlFor=\"toggle-all\">\n            Mark all as complete\n          </label>\n\n          <ul className=\"todo-list\">\n            {visibleTodos.map(todo => (\n              <Todo\n                key={todo.id}\n                {...todo}\n                toggleTodo={toggleTodo}\n                removeTodo={removeTodo}\n                changeTodoTitle={changeTodoTitle}\n              />\n            ))}\n          </ul>\n        </section>\n\n        <TodoListFooter\n          todos={todos}\n          clearCompletedTodos={clearCompletedTodos}\n        />\n      </section>\n      <div className=\"error-message\">\n        {errorMessage}\n      </div>\n    </div>\n  );\n};\n","import { TodoList } from './components/TodoList';\n\nfunction App() {\n  return (\n    <TodoList />\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}